package mmms.member.dao;

//9. Oracle DB로 필요한 SQL 구문을 전송하는 클래스 구현
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import mmms.member.db.JdbcUtil;
import mmms.member.vo.Member;

public class MemberDAO {
	// 연결관련 내용
	Connection con;

	public MemberDAO(Connection con) {
		this.con = con;
	}

	// 1. 회원정보 등록
	public int insertNewMember(Member newMember) {
		PreparedStatement pstmt = null;
		int insertCount = 0;
		String sql = "INSERT INTO mms_member VALUES(mms_member_id_seq.nextval,?,?,?,?,?)";
		try {
			pstmt = con.prepareStatement(sql);
			pstmt.setString(1, newMember.getName());
			pstmt.setString(2, newMember.getAddr());
			pstmt.setString(3, newMember.getNation());
			pstmt.setString(4, newMember.getEmail());
			pstmt.setInt(5, newMember.getAge());

			insertCount = pstmt.executeUpdate();// 업데이트를 해서 내용 올리기
//		    if(insertCount > 0) {
//				co.printAddSuccessMessage(newMember);
//			}else {
//				co.printAddFailMessage(newMember);
//			}
		} catch (SQLException e) {

		} finally {
			JdbcUtil.close(pstmt);
		}

		return insertCount;// 제대로 업데이트 됐는지는 다른데서 보기

	}

	// 2. 회원 목록 보기
	public ArrayList<Member> selectMemberList() {

		PreparedStatement pstmt =null;
		ResultSet rs = null;
		//객체생성
		ArrayList<Member> memberList = new ArrayList<>();
		String sql = "SELECT * FROM mms_member";
		Member member = null;
		
		try {
		pstmt = con.prepareStatement(sql);
		//그리고 실행된 결과값
		rs = pstmt.executeQuery();
		while(rs.next()) {
			String name = rs.getString("name");
			String addr = rs.getString("addr");
			String nation = rs.getString("nation");
			String natemail = rs.getString("natemail");
			String email = rs.getString("email");
			int age = rs.getInt("age");
			
			//한번만 실행하도록 객체를 위로 뻈다.
			member = new Member(name, addr, nation,email,age);
			memberList.add(member);
		}
		}catch (SQLException e) {

	}finally {//닫기
		JdbcUtil.close(rs);
		JdbcUtil.close(pstmt);
	}
		//리턴값이 member 주소값
		return memberList;
	}

	// 3. 특정 회원정보 정보 보기
	public Member selectOldMember(String name) {
		return null;

	}

	// 4. 회원 정보 수정(3활용)
	public int updateMember(Member updateMember) {
		return 0;

	}

	// 5. 회원 정보 삭제(3활용)
	public int deleteMember(String name) {
		return 0;

	}

}
